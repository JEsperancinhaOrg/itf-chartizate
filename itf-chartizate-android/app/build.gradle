plugins {
    id 'com.android.application'
    id 'maven'
    id 'maven-publish'
    id 'signing'
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        google()
        jcenter()

    }
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.0"
    defaultConfig {
        applicationId "org.jesperancinha.chartizate"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        maxSdkVersion 29
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
    lintOptions {
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'junit:junit:4.12'
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'org.jesperancinha.itf:itf-chartizate-api:4.1.0'
    androidTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.5.1'
    androidTestImplementation group: 'org.assertj', name: 'assertj-core', version: '3.13.2'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT");
}

def getReleaseRepositoryUrl() {
    println "Reading Maven repository Release URL from gradle.properties 'RELEASE_REPOSITORY_URL'"
    if (hasProperty('RELEASE_REPOSITORY_URL')) {
        return RELEASE_REPOSITORY_URL;
    }
    throw new InvalidUserDataException("RELEASE_REPOSITORY_URL is not defined");
}

def getSnapshotRepositoryUrl() {
    println "Reading Maven repository Snapshot URL from gradle.properties 'SNAPSHOT_REPOSITORY_URL'"
    if (hasProperty('SNAPSHOT_REPOSITORY_URL')) {
        return SNAPSHOT_REPOSITORY_URL;
    }
    throw new InvalidUserDataException("SNAPSHOT_REPOSITORY_URL is not defined");
}

def getRepositoryUsername() {
    println "Reading Maven repository username from gradle.properties 'mavenRepositoryUsername'"
    if (hasProperty('mavenRepositoryUsername')) {
        return mavenRepositoryUsername;
    }
    throw new InvalidUserDataException("mavenRepositoryUsername is not defined, check your user ~/.gradle/gradle.properties file");
}

def getRepositoryPassword() {
    println "Reading Maven repository password from gradle.properties 'mavenRepositoryPassword'"
    if (hasProperty('mavenRepositoryPassword')) {
        return mavenRepositoryPassword;
    }
    throw new InvalidUserDataException("mavenRepositoryPassword is not defined, check your user ~/.gradle/gradle.properties file");
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
    sign publishing.publications
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }

    task androidJavadocs(type: Javadoc) {
        // execute only if I'm publishing on maven
        onlyIf { gradle.taskGraph.hasTask(uploadArchives) }

        // all the sources of the current module
//        source = android.sourceSets.main.java.srcDirs
        // the Android SDK classpath
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        // all the dependencies classpaths
        classpath += configurations.compile
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar, androidJavadocsJar
    }
}